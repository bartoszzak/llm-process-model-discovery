{
  "task": {
    "business rule": {
      "name": "Business rule task type",
      "description": "Business rules, added with BPMN 2.0, are specific types of services maintained by a business group, rather than an IT group. The rule shape is used to represent the implementation of a business rule."
    },
    "manual task": {
      "name": "Manual task type",
      "description": "A manual task type is used whenever an activity must be executed manually. It can be executed without any outside help or application (e.g. loading a truck with product)."
    },
    "receive task": {
      "name": "Receive task type",
      "description": "A receive task indicates that the process is relying on an incoming message from a third party. Upon receiving a message, the task has been performed."
    },
    "script task": {
      "name": "Script task type",
      "description": "Script tasks are executed by a business process engine. The script is written in a language that the engine can parse, which, in many instances, is JavaScript."
    },
    "send task": {
      "name": "Send task type",
      "description": "A send task sends a message to another process or lane. The task is completed once the message is sent."
    },
    "service task": {
      "name": "Service task type",
      "description": "A service task is any task that uses an automated application or web service to complete the task."
    },
    "user task": {
      "name": "User task type",
      "description": "The user task type indicates that the task is being performed by a person and cannot be easily broken down into simpler tasks."
    }
  },
  "event": {
    "message intermediate catch": {
        "name": "Message Intermediate Catch Event",
        "description": "This event is used to wait for and capture an incoming message from an external source. It signifies that a message has been received and triggers the subsequent flow."
    },
    "message intermediate throw": {
        "name": "Message Intermediate Throw Event",
        "description": "This event is used to send a message to an external recipient. It indicates that a message is being thrown or sent from the process, potentially triggering a related process or participant."
    },
    "timer intermediate catch": {
        "name": "Timer Intermediate Catch Event",
        "description": "This event represents a time-based trigger. It waits for a specific amount of time to elapse or for a specific date and time to occur before continuing the process flow."
    },
    "escalation intermediate throw": {
        "name": "Escalation Intermediate Throw Event",
        "description": "This event is used to raise an escalation or notify higher-level authorities or systems about an exceptional condition or problem that requires attention or intervention."
    },
    "conditional intermediate catch": {
        "name": "Conditional Intermediate Catch Event",
        "description": "This event waits for a specific condition to be met before proceeding with the process flow. It checks for a defined condition and continues only if the condition evaluates to true."
    },
    "link intermediate catch": {
        "name": "Link Intermediate Catch Event",
        "description": "This event waits for the activation of a predefined link. It serves as a synchronization point that ensures the execution of multiple parallel activities before proceeding further."
    },
    "link intermediate throw": {
        "name": "Link Intermediate Throw Event",
        "description": "This event is used to trigger or activate a predefined link, allowing parallel activities or processes to proceed past the synchronization point."
    },
    "compensation intermediate throw": {
        "name": "Compensation Intermediate Throw Event",
        "description": "This event is used to initiate a compensation process. It triggers a compensation activity to undo or reverse the effects of previously executed activities."
    },
    "signal intermediate catch": {
        "name": "Signal Intermediate Catch Event",
        "description": "This event waits for the occurrence of a specific signal. It represents a point in the process where it listens for a signal event, which can be sent from various sources or processes."
    },
    "signal intermediate throw": {
        "name": "Signal Intermediate Throw Event",
        "description": "This event is used to send a signal to notify other parts of the process or external entities about a particular event or condition. It triggers the listening processes to react accordingly."
    }
  }
}